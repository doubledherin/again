{"version":3,"sources":["webpack:///./src/components/galleryItem.jsx","webpack:///./src/pages/gallery.jsx","webpack:///./src/constants/index.js"],"names":["GalleryItem","props","className","spanClasses","onClick","window","location","slug","src","imageSrc","alt","text","data","console","log","process","__PATH_PREFIX__","__BASE_PATH__","nodes","allFile","map","node","idx","relativePath","originalName","childImageSharp","fluid","split","word","charAt","toUpperCase","slice","join","replace","galleryPathPrefix","deriveSlug","key","id","width","height","query","module","exports"],"mappings":"gLAgBeA,EAdK,SAACC,GAEnB,OACE,yBAAKC,UAAS,0BAA4BD,EAAME,YAAeC,QAAS,kBAAMC,OAAOC,SAAWL,EAAMM,OACpG,yBAAKL,UAAU,gBACb,yBAAKA,UAAU,SACb,yBAAKM,IAAKP,EAAMQ,SAAUC,IAAKT,EAAMS,OAEvC,yBAAKR,UAAU,QAAQD,EAAMU,S,YCHtB,sBAAe,IAAZC,EAAW,EAAXA,KAChBC,QAAQC,IAAI,+BAAgCC,GAAYC,iBACxDH,QAAQC,IAAI,iCAAiCE,GAC7CH,QAAQC,IAAI,+BAA+BG,GAHhB,IAKRC,EAAYN,EAAvBO,QAAWD,MAEbf,EAAc,CAClB,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAGF,OACE,kBAAC,IAAD,KACE,yBAAKD,UAAU,qBACXU,GAAQM,GACRA,EAAME,KAAI,SAACC,EAAMC,GAAS,IAChBC,EAAiBF,EAAjBE,aACAC,EAAiBH,EAAKI,gBAAgBC,MAAtCF,aACFb,EAAkBa,EAqBAG,MAAM,KAAK,GACdA,MAAM,KACJP,KAAI,SAAAQ,GACnC,OAAOA,EAAKC,OAAO,GAAGC,cAAgBF,EAAKG,MAAM,MAEzBC,KAAK,KAzBfzB,EA4BlB,SAAoBgB,GAElB,OADyBA,EAAaI,MAAM,KAAK,GAAGM,QAAQC,oBAAmB,IAC/E,IA9BuBC,CAAWZ,GACxB,OACE,kBAAC,EAAD,CACEa,IAAKf,EAAKgB,GACVX,MAAOL,EAAKI,gBAAgBC,MAC5BjB,SAAUY,EAAKI,gBAAgBC,MAAMlB,IACrCE,IAAG,uBAAyBC,EAC5BA,KAAMA,EACN2B,MAAO,EACPC,OAAQ,EACRhC,KAAMA,EACNJ,YAAaA,EAAYmB,EAAM,WAsBxC,IAAMkB,EAAK,c,mBCjElBC,EAAOC,QAAU,CACfR,kBAHwB","file":"component---src-pages-gallery-jsx-fa7ac9d28f96f923e4ad.js","sourcesContent":["import React from 'react'\n\nconst GalleryItem = (props) => {\n\n  return (\n    <div className={`gallery-item-container ${props.spanClasses}`} onClick={() => window.location = props.slug}>\n      <div className=\"gallery-item\">\n        <div className=\"image\">\n          <img src={props.imageSrc} alt={props.alt} />\n        </div>\n        <div className=\"text\">{props.text}</div>\n      </div>\n    </div>\n  )\n}\n\nexport default GalleryItem","import React from \"react\"\nimport { graphql } from 'gatsby'\n\nimport Layout from '../components/layout'\nimport GalleryItem from '../components/galleryItem'\nimport { galleryPathPrefix } from '../constants'\n\nexport default ({ data }) => {\n  console.log(\"PATH PREFIX ON process.env: \", process.env.__PATH_PREFIX__) // Yields undefined\n  console.log(\"PATH PREFIX IS EMPTY STRING: \", __PATH_PREFIX__ === '') // Yields true\n  console.log(\"BASE PATH IS EMPTY STRING: \", __BASE_PATH__ === '') // Yields true\n  \n  const { allFile: { nodes } } = data\n\n  const spanClasses = [\n    \"w-3 h-2\",\n    \"w-3 h-1\",\n    \"w-1 h-1\",\n    \"w-2 h-2\",\n    \"w-1 h-2\",\n    \"w-2 h-1\",\n    \"w-1 h-1\",\n    \"w-3 h-1\",\n    \"w-2 h-1\"\n  ]\n\n  return (\n    <Layout>\n      <div className=\"gallery-container\">\n        { data && nodes && \n          nodes.map((node, idx) => {\n            const { relativePath } = node\n            const { originalName } = node.childImageSharp.fluid\n            const text = deriveText(originalName)\n            const slug = deriveSlug(relativePath)\n            return (\n              <GalleryItem \n                key={node.id} \n                fluid={node.childImageSharp.fluid} \n                imageSrc={node.childImageSharp.fluid.src}\n                alt={`spirograph based on ${text}`} \n                text={text} \n                width={2} \n                height={2} \n                slug={slug}\n                spanClasses={spanClasses[idx % 9]} />\n            )\n          })\n        }\n      </div>\n  </Layout>\n)}\n\nfunction deriveText(filename) {\n  const withoutExtension = filename.split('.')[0]\n  const words = withoutExtension.split('-')\n  const initialCappedWords = words.map(word => {\n    return word.charAt(0).toUpperCase() + word.slice(1)\n  })\n  return initialCappedWords.join(\" \")\n}\n\nfunction deriveSlug(relativePath) {\n  const withoutExtension = relativePath.split('.')[0].replace(galleryPathPrefix, '')\n  return `${withoutExtension}/`\n}\n\nexport const query = graphql`\n  query {\n    allFile(filter: {relativePath: {regex: \"/^images\\/gallery/\"}}) {\n      nodes {\n        id\n        childImageSharp {\n          fluid {\n            originalName\n            ...GatsbyImageSharpFluid\n          }\n        }\n        relativePath\n      }\n    }\n  }  \n`","const galleryPathPrefix = \"images/gallery\"\n\nmodule.exports = {\n  galleryPathPrefix\n}"],"sourceRoot":""}